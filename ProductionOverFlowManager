--------------------------------------
---------- WORK IN PROGRESS ----------
--------------------------------------

---------- Configs Section ----------

DEBUG_ACTIVE = true

buffer_name = "Buffer" -- Overflow Container Name
machines_name = "Build_FF_CookingHub_C"
refreshTime = 30 -- Tempo main loop 
List = {
 "Doggo Chow",
 "Apple Pie",
 "Banana Pie",
 "Berry Pie"
}

SPLITER_NAME = "SPLITER" 
-- 0 = LEFT ; 1 = CENTER ; 2 = RIGHT --
MAIN_OUT = 2
OVERFLOW_OUT = 0   
TIMER = 5
LISTREFILL = {
"Doggo Chow"
}

SCREEN_NAME = "s"
w,h = 15,15

BackColors = {default= {0,1,0,1}}
              
FrontColors = {default= {0.01,0.01,0.01,1}}

---------- END CONFIG SECTION ----------
-----------------------------------------


---------- LINK COMPONENTS SECTION ----------

buffer = component.proxy(component.findComponent("Buffer"))
Machines = component.proxy(component.findComponent(findClass(machines_name)))
spliter = component.proxy(component.findComponent(SPLITER_NAME)[1])
local gpu = computer.getPCIDevices(findClass("GPU_T1_C"))[1]
gpu = computer.getPCIDevices(findClass("GPUT1"))[1]
local scr = component.proxy(component.findComponent(SCREEN_NAME)[1])

---------- END LINK COMPONENTS SECTION ----------
-------------------------------------------------


---------- VAR INIT SECTION ----------

firstStart = true
chowFull = false
item = { }
tempBuffer = buffer[1]
inv = tempBuffer:getInventories()[1]
gpu:bindScreen(scr)
h,l = gpu:getSize()
print(h,l)
gpu:setSize(15,15)



---------- END VAR INIT SECTION ----------
------------------------------------------

---------- FUNCTION SECTION ----------

function debug(text, force) if (DEBUG_ACTIVE or force==1) then print(text) end  end

function getInventory()
 item = { }
 invSize = inv.Size
 inv:sort()
 print("Items in Inventory: "..inv.itemCount)
  for i =0,invSize-1,1 do
   stack = inv:getStack(i)
   k = i+1
    if stack.item.type then
     itemName = stack.item.type.name
     itemCount = inv.itemCount
     print("Slot "..i..": "..itemName)
     item[k] = itemName
      overflowList(itemName)
      if itemName == listedName then
       List[itemName] = true
       print(itemName..": "..tostring(List[itemName]))
      end
    --else
      --if #item ~= 0 then table.remove(item,k) end
    end
  end
end


function overflowList(name)
  for _,v in pairs(List) do
    if name == v then
     listedName = v
     break
    end
  end
end

                                                           
function machinesControl()
 local r 
  for _,v in pairs(Machines) do
   r = v:getRecipe().name
   overflowList(r)
   if r == listedName then
     if List[r] and not v.standby then
      v.standby = true 
      state = string.format("%s -> %s",v,v.standby)
     elseif not List[r] and v.standby then
      v.standby = false
      state = string.format("Machine: %s -> %s",v,v.standby)     
     else
      state = string.format("Machine: %s -> %s",v,v.standby)
     end
   end
  end
end

function initList(List)
  for _,v in ipairs(List) do
   List[v] = false
  end
end

function checkSpliter()
 i = spliter:getInput(4)
  if i.type then 
   itemSlot = 4
   debug(""..itemSlot.." "..i.type.name) 
   itemName = i.type.name
   debug("Item Name: "..tostring(itemName))
    for _,v in pairs(LISTREFILL) do
--debug("Item Name _: "..tostring(_))
      if itemName == v and type(v) == "string" then print(tostring(itemName).." - Matching - "..tostring(v)) spliter:transferItem(MAIN_OUT)
      elseif itemName ~= v and type(v) == "string" then print(tostring(itemName).." - Not Matching - "..tostring(v)) spliter:transferItem(OVERFLOW_OUT)
      end
    end
  end
end

---------- END FUNCTION SECTION ----------
------------------------------------------

---------- SCREEN SECTION ----------

function setBackgroundColor(colorName)
    gpu:setBackground(BackColors[colorName][1],BackColors[colorName][2],BackColors[colorName][3],BackColors[colorName][4])
end

function setForegroundColor(colorName)
    gpu:setForeground(FrontColors[colorName][1],FrontColors[colorName][2],FrontColors[colorName][3],FrontColors[colorName][4])
end

function setColor(colorName)
    setBackgroundColor(colorName)
    setForegroundColor(colorName)
end

function setDefaultColor()
    setColor("default")
end

function clearScreen()
    setDefaultColor()
    gpu:fill(0,0,w,h," ")
    gpu:flush()
end

function listOnScreen()
 gpu:setText(x,0,"Amount: "..tostring(itemCount))
 --y = 2
 gpu:setText(x,2,"Items: ")
 y = 3
  for _,v in pairs(item) do
   gpu:setText(x,y,v.." ("..tostring(_)..")")
   y = y+1
    if y >= h then y = 3 end
  end
 gpu:flush()
end

---------- END SCREEN SECTION ----------
----------------------------------------

---------- MAIN LOOP ----------

--lastRefresh = computer.millis()
lastAlert = false
initList(List)

clearScreen()

while true do
 t = event.pull(TIMER)
   getInventory()
    for _,v in pairs(item) do
      if v == List[itemName] then
        check = inv:getStack(_)
        if not check.item.type then
         List[itemName] = false
          if #item ~= 0 then
           machinesControl()
           table.remove(item,_)
          end
        end 
      end
    end
 machinesControl()
 checkSpliter()
 listOnScreen()
end
